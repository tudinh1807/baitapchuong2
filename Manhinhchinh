import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.Vector;
import javax.swing.border.EmptyBorder;

public class Manhinhchinh extends JFrame implements ActionListener {
	
	private JTextField tid = new JTextField();
	private JTextField tname = new JTextField();
	private JTextField tage = new JTextField();
	
	String ngay[] = {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","30","31"};
	String thang[] = {"1","2","3","4","5","6","7","8","9","10","11","12"}; 
	String nam[]= {"1980","1981","1982","1983","1984","1985","1986","1987","1988","1989","1990","1991","1992","1993","1994","1995","1996","1997","1998","1999","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016","2017","2018","2019"};
	
	JComboBox cbngay = new JComboBox(ngay);
	JComboBox cbthang = new JComboBox(thang);
	JComboBox cbnam = new JComboBox(nam);
	
	JScrollPane tr;
	DefaultTableModel model;
	JTable tb = new JTable();
	String[] colums= {"ID","Tên","Tuổi","Ngày Sinh","Giới Tính"};
	String[][] Data = {};
	
	private JLabel err;
	
	private JRadioButton bmale;
	private	JRadioButton bfemale;
	private ButtonGroup bg;
	
	public Manhinhchinh() {
		try {
			
			model = new DefaultTableModel(Data,colums);
			tb = new JTable(model) {
				public boolean isCellEditable(int rowIndex, int colIndex) {
					return false; //Disable chỉnh sửa tất cả các Cell
					}
			};
			tr = new JScrollPane(tb);
			editcolum();

		Container con = this.getContentPane();
			
		setTitle("Quản lý sinh viên");
		
		
		JLabel qlsv = new JLabel("QUẢN LÝ SINH VIÊN");
		JPanel ql = new JPanel();
		ql.setLayout(new FlowLayout());
		ql.add(qlsv,"Center");
		
		JPanel cp = new JPanel(); //Panel để chứa 3 combobox(ngày sinh, tháng, năm)
		cp.setLayout(new GridLayout(1,3));
		cp.add(cbngay);
		cp.add(cbthang);
		cp.add(cbnam);
		
		err = new JLabel(""); //hiện lỗi
		
		JButton add = new JButton("Thêm");
		JButton edit = new JButton("Sửa");
		JButton del = new JButton("Xóa");
		JButton exit = new JButton("Thoát");
		JPanel bt = new JPanel(); //Panel 4 nút chức năng
		bt.setLayout(new FlowLayout());
		bt.add(add);
		bt.add(edit);
		bt.add(del);
		bt.add(exit);
		
		JPanel er = new JPanel();
		er.setLayout(new GridLayout(3,1));
		er.add(err);
		er.add(bt);
		
		JLabel jid = new JLabel("ID :");
		JLabel jname = new JLabel("Tên : ");
		JLabel jage = new JLabel("Tuổi : ");
		JLabel jdob = new JLabel("Ngày sinh : ");
		JLabel jgender = new JLabel("Giới tính : ");
		
		bmale = new JRadioButton("Nam");//radiobutton
		bfemale = new JRadioButton("Nữ");
		bg=new ButtonGroup();
		bg.add(bmale);
		bg.add(bfemale);
		
		JPanel p2 = new JPanel(); //Panel 2 nút giới tính
		p2.setLayout(new FlowLayout()); 
		p2.add(bmale);
		p2.add(bfemale);
		
		JPanel p3 = new JPanel(); //Panel để chứa ID,Tên,Tuổi, Ngày sinh, Giới tính cùng các textfield, combobox, radiobutton
		p3.setLayout(new GridLayout(5,2));
		
		p3.add(jid);
		p3.add(tid);
		
		p3.add(jname);
		p3.add(tname);
		
		p3.add(jage);
		p3.add(tage);
		
		p3.add(jdob);
		p3.add(cp);
		
		p3.add(jgender);
		p3.add(p2);
		
		JPanel left = new JPanel(); //Panel phía bên trái
		left.setLayout(new GridLayout(3,1));
		left.add(p3);
		left.add(er);
		
		JPanel lobby = new JPanel();
		lobby.setLayout(new GridLayout(1,2));
		lobby.add(left);
		lobby.add(tr);	
		
		JPanel lob = new JPanel();
		lob.setLayout(new FlowLayout());
		lob.add(ql);
		lob.add(lobby);
		
		con.add(lob);
		
		add.addActionListener(this);
		edit.addActionListener(this);
		del.addActionListener(this);
		exit.addActionListener(this);
		
		cbngay.addActionListener(this);
		cbthang.addActionListener(this);
		cbnam.addActionListener(this);
		
		setVisible(true);
		setSize(950,400);
		setResizable(false);
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		}
		
		catch(Exception e) {
			System.out.println(e.getMessage());
		}
		
	}
	
	
	public void editcolum() {
		for(int i=0;i<5;i++) {
			TableColumn colum = tb.getColumnModel().getColumn(i);
			if(i==0) colum.setPreferredWidth(50);
			if(i==1) colum.setPreferredWidth(150);
			if(i==2) colum.setPreferredWidth(50);
			if(i==3) colum.setPreferredWidth(150);
		}
	}	

	public void actionPerformed(ActionEvent e) {
		
		if(e.getActionCommand().equals("Thoát")){
		this.dispose();
		}
		
		if(e.getActionCommand().equals("Thêm")) {
			insert();
		}
		
		if(e.getActionCommand().equals("Sửa")) {
			update();
		}
		
		if(e.getActionCommand().equals("Xóa")) {
			delete();
		}
	}
	
	
	public void update() {
		if(tb.getSelectedRow()==-1) { //Kiểm tra xem người dùng có chọn hay k
			if(tb.getRowCount()==0) { //Tiếp tục kiểm tra bảng có trống hay không
				err.setForeground(Color.RED);
				err.setText("Bảng trống"); //Nếu trống hiển thị message báo bảng trống
			}
			else {
				err.setForeground(Color.RED);
				err.setText("Phải chọn một bảng để sửa"); //Nếu không, hiển thị thông báo buộc người dùng phải chọn hàng để thao tác
			}
		}
		else {
			update upa= new update();
			update up = new update(tid.getText(),tname.getText());
		}
	}
	
	public void delete() {
		if(tb.getSelectedRow()==-1) {
			if(tb.getRowCount()==0) {
				err.setForeground(Color.RED);
				err.setText("Bảng trống");
			}
			else {
				err.setForeground(Color.RED);
				err.setText("Phải chọn một bảng để xóa");
			}
		}
		else {
			model=(DefaultTableModel)tb.getModel();
			model.removeRow(tb.getSelectedRow());
		}
	}
	
	public void insert() {
		try {
			
			if(tid.getText().equals("")||tname.getText().equals("")||tage.getText().equals("")) {
				
					if(tid.getText().equals("")){
						err.setText("ID không được bỏ trống");
						err.setForeground(Color.RED);
					}			
				else if(tname.getText().equals("")) {
					err.setText("Tên không được bỏ trống");
					err.setForeground(Color.RED);
				}
				else if(tage.getText().equals("")) {
					err.setText("Tuổi không được bỏ trống");
					err.setForeground(Color.RED);
				}

			}
			else {
				model = (DefaultTableModel)tb.getModel();
				String date = cbngay.getSelectedItem().toString()+"/"+cbthang.getSelectedItem().toString()+"/"+cbnam.getSelectedItem().toString();
				model.addRow(new Object[] {tid.getText(),tname.getText(),tage.getText(),date});
			}
	}
		catch(Exception e) {
			System.out.println(e.getMessage());
		}
	}
	
	
	public static void main(String[] args) {
		Manhinhchinh lobby = new Manhinhchinh();
	}
	
}

class InputException extends Exception {
	public InputException() {
		super();
	}
}

